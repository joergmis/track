// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	track "github.com/joergmis/track"
	mock "github.com/stretchr/testify/mock"
)

// MockActivityRepository is an autogenerated mock type for the ActivityRepository type
type MockActivityRepository struct {
	mock.Mock
}

type MockActivityRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActivityRepository) EXPECT() *MockActivityRepository_Expecter {
	return &MockActivityRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: activity
func (_m *MockActivityRepository) Add(activity track.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(track.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockActivityRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - activity track.Activity
func (_e *MockActivityRepository_Expecter) Add(activity interface{}) *MockActivityRepository_Add_Call {
	return &MockActivityRepository_Add_Call{Call: _e.mock.On("Add", activity)}
}

func (_c *MockActivityRepository_Add_Call) Run(run func(activity track.Activity)) *MockActivityRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(track.Activity))
	})
	return _c
}

func (_c *MockActivityRepository_Add_Call) Return(_a0 error) *MockActivityRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityRepository_Add_Call) RunAndReturn(run func(track.Activity) error) *MockActivityRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActivities provides a mock function with given fields:
func (_m *MockActivityRepository) GetAllActivities() ([]track.Activity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllActivities")
	}

	var r0 []track.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]track.Activity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []track.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]track.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_GetAllActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActivities'
type MockActivityRepository_GetAllActivities_Call struct {
	*mock.Call
}

// GetAllActivities is a helper method to define mock.On call
func (_e *MockActivityRepository_Expecter) GetAllActivities() *MockActivityRepository_GetAllActivities_Call {
	return &MockActivityRepository_GetAllActivities_Call{Call: _e.mock.On("GetAllActivities")}
}

func (_c *MockActivityRepository_GetAllActivities_Call) Run(run func()) *MockActivityRepository_GetAllActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockActivityRepository_GetAllActivities_Call) Return(_a0 []track.Activity, _a1 error) *MockActivityRepository_GetAllActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_GetAllActivities_Call) RunAndReturn(run func() ([]track.Activity, error)) *MockActivityRepository_GetAllActivities_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActivityRepository creates a new instance of MockActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActivityRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockActivityRepository {
	mock := &MockActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
