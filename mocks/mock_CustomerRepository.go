// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	track "github.com/joergmis/track"
	mock "github.com/stretchr/testify/mock"
)

// MockCustomerRepository is an autogenerated mock type for the CustomerRepository type
type MockCustomerRepository struct {
	mock.Mock
}

type MockCustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerRepository) EXPECT() *MockCustomerRepository_Expecter {
	return &MockCustomerRepository_Expecter{mock: &_m.Mock}
}

// GetAllCustomers provides a mock function with given fields:
func (_m *MockCustomerRepository) GetAllCustomers() ([]track.Customer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomers")
	}

	var r0 []track.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]track.Customer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []track.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]track.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerRepository_GetAllCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomers'
type MockCustomerRepository_GetAllCustomers_Call struct {
	*mock.Call
}

// GetAllCustomers is a helper method to define mock.On call
func (_e *MockCustomerRepository_Expecter) GetAllCustomers() *MockCustomerRepository_GetAllCustomers_Call {
	return &MockCustomerRepository_GetAllCustomers_Call{Call: _e.mock.On("GetAllCustomers")}
}

func (_c *MockCustomerRepository_GetAllCustomers_Call) Run(run func()) *MockCustomerRepository_GetAllCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCustomerRepository_GetAllCustomers_Call) Return(_a0 []track.Customer, _a1 error) *MockCustomerRepository_GetAllCustomers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerRepository_GetAllCustomers_Call) RunAndReturn(run func() ([]track.Customer, error)) *MockCustomerRepository_GetAllCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomerRepository creates a new instance of MockCustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerRepository {
	mock := &MockCustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
