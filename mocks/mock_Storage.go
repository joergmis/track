// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	track "github.com/joergmis/track"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// AddActivity provides a mock function with given fields: activity
func (_m *MockStorage) AddActivity(activity track.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for AddActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(track.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_AddActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddActivity'
type MockStorage_AddActivity_Call struct {
	*mock.Call
}

// AddActivity is a helper method to define mock.On call
//   - activity track.Activity
func (_e *MockStorage_Expecter) AddActivity(activity interface{}) *MockStorage_AddActivity_Call {
	return &MockStorage_AddActivity_Call{Call: _e.mock.On("AddActivity", activity)}
}

func (_c *MockStorage_AddActivity_Call) Run(run func(activity track.Activity)) *MockStorage_AddActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(track.Activity))
	})
	return _c
}

func (_c *MockStorage_AddActivity_Call) Return(_a0 error) *MockStorage_AddActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_AddActivity_Call) RunAndReturn(run func(track.Activity) error) *MockStorage_AddActivity_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivities provides a mock function with given fields:
func (_m *MockStorage) GetActivities() ([]track.Activity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActivities")
	}

	var r0 []track.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]track.Activity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []track.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]track.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivities'
type MockStorage_GetActivities_Call struct {
	*mock.Call
}

// GetActivities is a helper method to define mock.On call
func (_e *MockStorage_Expecter) GetActivities() *MockStorage_GetActivities_Call {
	return &MockStorage_GetActivities_Call{Call: _e.mock.On("GetActivities")}
}

func (_c *MockStorage_GetActivities_Call) Run(run func()) *MockStorage_GetActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_GetActivities_Call) Return(_a0 []track.Activity, _a1 error) *MockStorage_GetActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetActivities_Call) RunAndReturn(run func() ([]track.Activity, error)) *MockStorage_GetActivities_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
