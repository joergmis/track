// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	track "github.com/joergmis/track"
	mock "github.com/stretchr/testify/mock"
)

// MockProjectRepository is an autogenerated mock type for the ProjectRepository type
type MockProjectRepository struct {
	mock.Mock
}

type MockProjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectRepository) EXPECT() *MockProjectRepository_Expecter {
	return &MockProjectRepository_Expecter{mock: &_m.Mock}
}

// AddTimeEntry provides a mock function with given fields: activity
func (_m *MockProjectRepository) AddTimeEntry(activity track.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for AddTimeEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(track.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProjectRepository_AddTimeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTimeEntry'
type MockProjectRepository_AddTimeEntry_Call struct {
	*mock.Call
}

// AddTimeEntry is a helper method to define mock.On call
//   - activity track.Activity
func (_e *MockProjectRepository_Expecter) AddTimeEntry(activity interface{}) *MockProjectRepository_AddTimeEntry_Call {
	return &MockProjectRepository_AddTimeEntry_Call{Call: _e.mock.On("AddTimeEntry", activity)}
}

func (_c *MockProjectRepository_AddTimeEntry_Call) Run(run func(activity track.Activity)) *MockProjectRepository_AddTimeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(track.Activity))
	})
	return _c
}

func (_c *MockProjectRepository_AddTimeEntry_Call) Return(_a0 error) *MockProjectRepository_AddTimeEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectRepository_AddTimeEntry_Call) RunAndReturn(run func(track.Activity) error) *MockProjectRepository_AddTimeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomers provides a mock function with given fields:
func (_m *MockProjectRepository) GetAllCustomers() ([]track.Customer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomers")
	}

	var r0 []track.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]track.Customer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []track.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]track.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectRepository_GetAllCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomers'
type MockProjectRepository_GetAllCustomers_Call struct {
	*mock.Call
}

// GetAllCustomers is a helper method to define mock.On call
func (_e *MockProjectRepository_Expecter) GetAllCustomers() *MockProjectRepository_GetAllCustomers_Call {
	return &MockProjectRepository_GetAllCustomers_Call{Call: _e.mock.On("GetAllCustomers")}
}

func (_c *MockProjectRepository_GetAllCustomers_Call) Run(run func()) *MockProjectRepository_GetAllCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProjectRepository_GetAllCustomers_Call) Return(_a0 []track.Customer, _a1 error) *MockProjectRepository_GetAllCustomers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectRepository_GetAllCustomers_Call) RunAndReturn(run func() ([]track.Customer, error)) *MockProjectRepository_GetAllCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllServices provides a mock function with given fields:
func (_m *MockProjectRepository) GetAllServices() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectRepository_GetAllServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServices'
type MockProjectRepository_GetAllServices_Call struct {
	*mock.Call
}

// GetAllServices is a helper method to define mock.On call
func (_e *MockProjectRepository_Expecter) GetAllServices() *MockProjectRepository_GetAllServices_Call {
	return &MockProjectRepository_GetAllServices_Call{Call: _e.mock.On("GetAllServices")}
}

func (_c *MockProjectRepository_GetAllServices_Call) Run(run func()) *MockProjectRepository_GetAllServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProjectRepository_GetAllServices_Call) Return(_a0 []string, _a1 error) *MockProjectRepository_GetAllServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectRepository_GetAllServices_Call) RunAndReturn(run func() ([]string, error)) *MockProjectRepository_GetAllServices_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockProjectRepository) Type() track.ProjectBackendType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 track.ProjectBackendType
	if rf, ok := ret.Get(0).(func() track.ProjectBackendType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(track.ProjectBackendType)
	}

	return r0
}

// MockProjectRepository_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockProjectRepository_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockProjectRepository_Expecter) Type() *MockProjectRepository_Type_Call {
	return &MockProjectRepository_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockProjectRepository_Type_Call) Run(run func()) *MockProjectRepository_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProjectRepository_Type_Call) Return(_a0 track.ProjectBackendType) *MockProjectRepository_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectRepository_Type_Call) RunAndReturn(run func() track.ProjectBackendType) *MockProjectRepository_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectRepository creates a new instance of MockProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectRepository {
	mock := &MockProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
