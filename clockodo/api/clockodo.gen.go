// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Api_key_authScopes  = "api_key_auth.Scopes"
	Api_user_authScopes = "api_user_auth.Scopes"
)

// Customer defines model for Customer.
type Customer struct {
	Active          bool   `json:"active"`
	BillableDefault bool   `json:"billable_default"`
	Color           int    `json:"color"`
	Id              int    `json:"id"`
	Name            string `json:"name"`
	Note            string `json:"note"`
}

// Customers defines model for Customers.
type Customers struct {
	Customers []Customer `json:"customers"`
	Paging    Pagination `json:"paging"`
}

// Entries defines model for Entries.
type Entries struct {
	Entries []Entry    `json:"entries"`
	Paging  Pagination `json:"paging"`
}

// EntriesFilter defines model for EntriesFilter.
type EntriesFilter struct {
	UsersId int `json:"users_id"`
}

// EntriesTexts defines model for EntriesTexts.
type EntriesTexts struct {
	Paging Pagination             `json:"paging"`
	Texts  map[string]interface{} `json:"texts"`
}

// EntriesTextsFilter defines model for EntriesTextsFilter.
type EntriesTextsFilter struct {
	TimeSince string `json:"time_since"`
	TimeUntil string `json:"time_until"`
	UsersId   int    `json:"users_id"`
}

// Entry defines model for Entry.
type Entry struct {
	Billable    int    `json:"billable"`
	CustomersId int    `json:"customers_id"`
	Id          int    `json:"id"`
	ProjectsId  int    `json:"projects_id"`
	TextsId     int    `json:"texts_id"`
	TimeSince   string `json:"time_since"`
	TimeUntil   string `json:"time_until"`
	UsersId     int    `json:"users_id"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	CountItems   int `json:"count_items"`
	CountPages   int `json:"count_pages"`
	CurrentPage  int `json:"current_page"`
	ItemsPerPage int `json:"items_per_page"`
}

// Project defines model for Project.
type Project struct {
	Active          bool   `json:"active"`
	BillableDefault bool   `json:"billable_default"`
	Completed       bool   `json:"completed"`
	CustomersId     int    `json:"customers_id"`
	Deadline        string `json:"deadline"`
	Id              int    `json:"id"`
	Name            string `json:"name"`
	Number          string `json:"number"`
}

// Projects defines model for Projects.
type Projects struct {
	Paging   Pagination `json:"paging"`
	Projects []Project  `json:"projects"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	Id    int    `json:"id"`
	Name  string `json:"name"`
}

// Users defines model for Users.
type Users struct {
	Users []User `json:"users"`
}

// WorkTimeDay defines model for WorkTimeDay.
type WorkTimeDay struct {
	Date      string             `json:"date"`
	Intervals []WorkTimeInterval `json:"intervals"`
	Offset    int                `json:"offset"`
	UsersId   int                `json:"users_id"`
}

// WorkTimeDays defines model for WorkTimeDays.
type WorkTimeDays struct {
	Paging       Pagination    `json:"paging"`
	WorkTimeDays []WorkTimeDay `json:"work_time_days"`
}

// WorkTimeInterval defines model for WorkTimeInterval.
type WorkTimeInterval struct {
	TimeSince string `json:"time_since"`
	TimeUntil string `json:"time_until"`
}

// GetV2EntriesParams defines parameters for GetV2Entries.
type GetV2EntriesParams struct {
	// TimeSince Start time of interval to return time entries from
	TimeSince string `form:"time_since" json:"time_since"`

	// TimeUntil End time of interval to return time entries from
	TimeUntil string        `form:"time_until" json:"time_until"`
	Filter    EntriesFilter `form:"filter" json:"filter"`
}

// GetV2EntriesTextsParams defines parameters for GetV2EntriesTexts.
type GetV2EntriesTextsParams struct {
	// Text Text to search for
	Text   string             `form:"text" json:"text"`
	Filter EntriesTextsFilter `form:"filter" json:"filter"`
}

// GetV2WorkTimesParams defines parameters for GetV2WorkTimes.
type GetV2WorkTimesParams struct {
	DateSince string `form:"date_since" json:"date_since"`
	DateUntil string `form:"date_until" json:"date_until"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV2Customers request
	GetV2Customers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Entries request
	GetV2Entries(ctx context.Context, params *GetV2EntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EntriesTexts request
	GetV2EntriesTexts(ctx context.Context, params *GetV2EntriesTextsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Projects request
	GetV2Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Users request
	GetV2Users(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2WorkTimes request
	GetV2WorkTimes(ctx context.Context, params *GetV2WorkTimesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV2Customers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CustomersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Entries(ctx context.Context, params *GetV2EntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EntriesTexts(ctx context.Context, params *GetV2EntriesTextsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EntriesTextsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Users(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2UsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2WorkTimes(ctx context.Context, params *GetV2WorkTimesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2WorkTimesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV2CustomersRequest generates requests for GetV2Customers
func NewGetV2CustomersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EntriesRequest generates requests for GetV2Entries
func NewGetV2EntriesRequest(server string, params *GetV2EntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_since", runtime.ParamLocationQuery, params.TimeSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_until", runtime.ParamLocationQuery, params.TimeUntil); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryParamBuf, err := json.Marshal(params.Filter); err != nil {
			return nil, err
		} else {
			queryValues.Add("filter", string(queryParamBuf))
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EntriesTextsRequest generates requests for GetV2EntriesTexts
func NewGetV2EntriesTextsRequest(server string, params *GetV2EntriesTextsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/entriesTexts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryParamBuf, err := json.Marshal(params.Filter); err != nil {
			return nil, err
		} else {
			queryValues.Add("filter", string(queryParamBuf))
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProjectsRequest generates requests for GetV2Projects
func NewGetV2ProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2UsersRequest generates requests for GetV2Users
func NewGetV2UsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2WorkTimesRequest generates requests for GetV2WorkTimes
func NewGetV2WorkTimesRequest(server string, params *GetV2WorkTimesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workTimes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_since", runtime.ParamLocationQuery, params.DateSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_until", runtime.ParamLocationQuery, params.DateUntil); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV2CustomersWithResponse request
	GetV2CustomersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2CustomersResponse, error)

	// GetV2EntriesWithResponse request
	GetV2EntriesWithResponse(ctx context.Context, params *GetV2EntriesParams, reqEditors ...RequestEditorFn) (*GetV2EntriesResponse, error)

	// GetV2EntriesTextsWithResponse request
	GetV2EntriesTextsWithResponse(ctx context.Context, params *GetV2EntriesTextsParams, reqEditors ...RequestEditorFn) (*GetV2EntriesTextsResponse, error)

	// GetV2ProjectsWithResponse request
	GetV2ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ProjectsResponse, error)

	// GetV2UsersWithResponse request
	GetV2UsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2UsersResponse, error)

	// GetV2WorkTimesWithResponse request
	GetV2WorkTimesWithResponse(ctx context.Context, params *GetV2WorkTimesParams, reqEditors ...RequestEditorFn) (*GetV2WorkTimesResponse, error)
}

type GetV2CustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customers
}

// Status returns HTTPResponse.Status
func (r GetV2CustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entries
}

// Status returns HTTPResponse.Status
func (r GetV2EntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EntriesTextsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntriesTexts
}

// Status returns HTTPResponse.Status
func (r GetV2EntriesTextsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EntriesTextsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
}

// Status returns HTTPResponse.Status
func (r GetV2ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Users
}

// Status returns HTTPResponse.Status
func (r GetV2UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2WorkTimesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkTimeDays
}

// Status returns HTTPResponse.Status
func (r GetV2WorkTimesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2WorkTimesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV2CustomersWithResponse request returning *GetV2CustomersResponse
func (c *ClientWithResponses) GetV2CustomersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2CustomersResponse, error) {
	rsp, err := c.GetV2Customers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CustomersResponse(rsp)
}

// GetV2EntriesWithResponse request returning *GetV2EntriesResponse
func (c *ClientWithResponses) GetV2EntriesWithResponse(ctx context.Context, params *GetV2EntriesParams, reqEditors ...RequestEditorFn) (*GetV2EntriesResponse, error) {
	rsp, err := c.GetV2Entries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EntriesResponse(rsp)
}

// GetV2EntriesTextsWithResponse request returning *GetV2EntriesTextsResponse
func (c *ClientWithResponses) GetV2EntriesTextsWithResponse(ctx context.Context, params *GetV2EntriesTextsParams, reqEditors ...RequestEditorFn) (*GetV2EntriesTextsResponse, error) {
	rsp, err := c.GetV2EntriesTexts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EntriesTextsResponse(rsp)
}

// GetV2ProjectsWithResponse request returning *GetV2ProjectsResponse
func (c *ClientWithResponses) GetV2ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ProjectsResponse, error) {
	rsp, err := c.GetV2Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProjectsResponse(rsp)
}

// GetV2UsersWithResponse request returning *GetV2UsersResponse
func (c *ClientWithResponses) GetV2UsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2UsersResponse, error) {
	rsp, err := c.GetV2Users(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2UsersResponse(rsp)
}

// GetV2WorkTimesWithResponse request returning *GetV2WorkTimesResponse
func (c *ClientWithResponses) GetV2WorkTimesWithResponse(ctx context.Context, params *GetV2WorkTimesParams, reqEditors ...RequestEditorFn) (*GetV2WorkTimesResponse, error) {
	rsp, err := c.GetV2WorkTimes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2WorkTimesResponse(rsp)
}

// ParseGetV2CustomersResponse parses an HTTP response from a GetV2CustomersWithResponse call
func ParseGetV2CustomersResponse(rsp *http.Response) (*GetV2CustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2EntriesResponse parses an HTTP response from a GetV2EntriesWithResponse call
func ParseGetV2EntriesResponse(rsp *http.Response) (*GetV2EntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2EntriesTextsResponse parses an HTTP response from a GetV2EntriesTextsWithResponse call
func ParseGetV2EntriesTextsResponse(rsp *http.Response) (*GetV2EntriesTextsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EntriesTextsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntriesTexts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2ProjectsResponse parses an HTTP response from a GetV2ProjectsWithResponse call
func ParseGetV2ProjectsResponse(rsp *http.Response) (*GetV2ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2UsersResponse parses an HTTP response from a GetV2UsersWithResponse call
func ParseGetV2UsersResponse(rsp *http.Response) (*GetV2UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Users
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2WorkTimesResponse parses an HTTP response from a GetV2WorkTimesWithResponse call
func ParseGetV2WorkTimesResponse(rsp *http.Response) (*GetV2WorkTimesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2WorkTimesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkTimeDays
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all customers
	// (GET /v2/customers)
	GetV2Customers(ctx echo.Context) error
	// Get entries in timeframe
	// (GET /v2/entries)
	GetV2Entries(ctx echo.Context, params GetV2EntriesParams) error
	// Get descriptions of time entries
	// (GET /v2/entriesTexts)
	GetV2EntriesTexts(ctx echo.Context, params GetV2EntriesTextsParams) error
	// List all projects
	// (GET /v2/projects)
	GetV2Projects(ctx echo.Context) error
	// Get all users
	// (GET /v2/users)
	GetV2Users(ctx echo.Context) error
	// Get descriptions of time entries
	// (GET /v2/workTimes)
	GetV2WorkTimes(ctx echo.Context, params GetV2WorkTimesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV2Customers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Customers(ctx echo.Context) error {
	var err error

	ctx.Set(Api_user_authScopes, []string{})

	ctx.Set(Api_key_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Customers(ctx)
	return err
}

// GetV2Entries converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Entries(ctx echo.Context) error {
	var err error

	ctx.Set(Api_user_authScopes, []string{})

	ctx.Set(Api_key_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2EntriesParams
	// ------------- Required query parameter "time_since" -------------

	err = runtime.BindQueryParameter("form", true, true, "time_since", ctx.QueryParams(), &params.TimeSince)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_since: %s", err))
	}

	// ------------- Required query parameter "time_until" -------------

	err = runtime.BindQueryParameter("form", true, true, "time_until", ctx.QueryParams(), &params.TimeUntil)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_until: %s", err))
	}

	// ------------- Required query parameter "filter" -------------

	if paramValue := ctx.QueryParam("filter"); paramValue != "" {

		var value EntriesFilter
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'filter' as JSON")
		}
		params.Filter = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument filter is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Entries(ctx, params)
	return err
}

// GetV2EntriesTexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2EntriesTexts(ctx echo.Context) error {
	var err error

	ctx.Set(Api_user_authScopes, []string{})

	ctx.Set(Api_key_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2EntriesTextsParams
	// ------------- Required query parameter "text" -------------

	err = runtime.BindQueryParameter("form", true, true, "text", ctx.QueryParams(), &params.Text)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text: %s", err))
	}

	// ------------- Required query parameter "filter" -------------

	if paramValue := ctx.QueryParam("filter"); paramValue != "" {

		var value EntriesTextsFilter
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'filter' as JSON")
		}
		params.Filter = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument filter is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2EntriesTexts(ctx, params)
	return err
}

// GetV2Projects converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Projects(ctx echo.Context) error {
	var err error

	ctx.Set(Api_user_authScopes, []string{})

	ctx.Set(Api_key_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Projects(ctx)
	return err
}

// GetV2Users converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2Users(ctx echo.Context) error {
	var err error

	ctx.Set(Api_user_authScopes, []string{})

	ctx.Set(Api_key_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2Users(ctx)
	return err
}

// GetV2WorkTimes converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2WorkTimes(ctx echo.Context) error {
	var err error

	ctx.Set(Api_user_authScopes, []string{})

	ctx.Set(Api_key_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2WorkTimesParams
	// ------------- Required query parameter "date_since" -------------

	err = runtime.BindQueryParameter("form", true, true, "date_since", ctx.QueryParams(), &params.DateSince)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date_since: %s", err))
	}

	// ------------- Required query parameter "date_until" -------------

	err = runtime.BindQueryParameter("form", true, true, "date_until", ctx.QueryParams(), &params.DateUntil)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date_until: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2WorkTimes(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/customers", wrapper.GetV2Customers)
	router.GET(baseURL+"/v2/entries", wrapper.GetV2Entries)
	router.GET(baseURL+"/v2/entriesTexts", wrapper.GetV2EntriesTexts)
	router.GET(baseURL+"/v2/projects", wrapper.GetV2Projects)
	router.GET(baseURL+"/v2/users", wrapper.GetV2Users)
	router.GET(baseURL+"/v2/workTimes", wrapper.GetV2WorkTimes)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY247bNhD9FZbtQ4sqttdpg8Jv6SYNFi3QALtpim4WBk2NbcYSqZAjb4TA/16QlGRJ",
	"pnzZ2kHfZJGay5k5c/EXylWaKQkSDZ18oYYvIWXu8To3qFLQ9jnTKgONAtwJ4yjWYJ+wyIBO6EypBJik",
	"m4jORJKwWQLTGOYsTzB8i6tE6caRkAgL0PZIxOH3kqVNlQa1kAt3oDB0sImohk+50BDTyb0VW8qIKvsD",
	"xpbSKgMfokqqmn0EjlZdBYvZxYU3jwRC6h6+0zCnE/rtcIv0sIR5WGO8qTUxrVlhf2dsYR05IOGtvcVQ",
	"KLnjcikgatgVcui1RF060HYHtgdHOWMFFZf1pDJpjx+/iQRDSZsb0GYazq6OuvrqHjV38BkDmJ3uakSx",
	"FsUQQcu3LYnff/gQ//hDOME7xvWh5hUccqYPOBQpTI2QPEw/d5xLFEnw+CmwR02dLQ19PhS7ZlfcDleT",
	"mhLTvnrT9z7Tymru/9Ch3X/aQnOudMqQTujN7Z/klxejK/Lu7joiMFgMyAc6Ho2vno1ePHs+ursaT57/",
	"NPn5xT80OhSC88g8IW4uYi1A2yhFzcjWYWkAdVq8G+TZrcAqlzitq1Ug7u5CxhbQdyHXGsorPYlhpU8z",
	"0L13uvi0P+joaNsUtVwIuu+RvUxXTrMEEOKe44OciYHFiZDhQnF6Y8/TGegjW3sn/8pOX4rY3/Jrq5sI",
	"7IH+TGU/a0g7qr9Wkd/psH11v9YQcuadCRV7SFlPIT8xfHvGL6+jzybT07qPhsk5dggjLzJkw3ulV3ci",
	"hVcs0FRihj3JLRH0miXHm1npuSm/DA1Oaj43gGHcTyjQzupWFS4FN+0+gMWZkv5R6dXUFfi4lHkSWK9Y",
	"cXz6d3Ttc7AOwlmnn45hxze5TUQN8FwLLG4tAmWBz8R0BcWU5bh0yEk6oUtgsatwnof072fXieIrFauX",
	"mfgdim1vZ/73JnKCbDKcIMmRakeUNRQ+25mVJa8U9xQBw7XIfH+m10vgK6JyJLgEYlSuORCuYpePOrFq",
	"ETMzGQ4XApf5bMBVOvyoQC9SYYaoGV95es1VQHhpHzEZ8IhosPchJnOtUqtPaKKkrezk5dsbEiuepyDR",
	"5eKA/AqPTENEcCkMScViiWQNuiCPkCRESJ7kMRDQWmlDlCZGpFlSkBnYs7JLfOPiiHbG3NpiVa3HNKJr",
	"0MbbORqMBleOzxlIlgk6oc8HV4ORLdEMlw624Xo8bO2PC098m4vO4puYTugbwL/G2w3U5pfJlDQ+Qcaj",
	"kR+CJIJEnzJZIrj7fvjR+InJc+rYzdT4KLeBv805B2PmeUJq+3zW5mnK7DRO/xAGCUsSwhvWIlsYy4TG",
	"Qmq/sr43ls1+z6tV1eKmWQrosLrv5sUtMo3EMoyoOalKHEFlUyTX0h+VGl22uEpIJ/RTDrrYUqDF2C2V",
	"UecQNXA8x8S9ibpevJbx2XzwheZr+HCW5Guv8i4BQ67N/XnXrc3DBXlRpeDTWPEGsI6Z8DGcaz8VVdyo",
	"/+LoMKP+w+EgPfzNAxyxl2w2GWCaL8lc6b78gc+4N3MunATN/yb+j5ng0X56OjQ+MpbqTV7vS4vm+tCf",
	"EvXKckEgah3/sVNkW1srr7cbTOV2vQv0++y3iAs67BU8PeTW2dy0W2K5kFRuPpaD6QFX39fXdugeoold",
	"BI7oZwFG90o73Fm60i7JydbC8jU52ZjYHfqdEfv+wYLYHuDvHywUBvS6Cll7IE6LAS+HSjcV28HRflFq",
	"/1KFYTtMWR3ly5o4jXeVuY1XPus2D5t/AwAA//87o3YtCBoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
